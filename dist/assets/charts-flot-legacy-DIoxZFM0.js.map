{"version":3,"file":"charts-flot-legacy-DIoxZFM0.js","sources":["../../src/charts-flot.html?html-proxy&index=2.js"],"sourcesContent":["\n        import Chart from 'chart.js/auto';\n        \n        // Chart instances\n        let cpuChart, realTimeInterval;\n        let isRealTimeActive = true;\n        \n        // Real-time CPU Load Chart\n        function initCpuLoadChart() {\n            const ctx = document.getElementById('cpuLoadChart').getContext('2d');\n            \n            cpuChart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: Array(20).fill(''),\n                    datasets: [{\n                        label: 'CPU Load',\n                        data: Array(20).fill(0),\n                        borderColor: '#dc3545',\n                        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n                        borderWidth: 2,\n                        tension: 0.4,\n                        fill: true,\n                        pointRadius: 0,\n                        pointHoverRadius: 5\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    animation: {\n                        duration: 150\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            max: 100,\n                            ticks: {\n                                callback: function(value) {\n                                    return value + '%';\n                                }\n                            }\n                        },\n                        x: {\n                            display: false\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: false\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    return 'CPU: ' + context.parsed.y.toFixed(1) + '%';\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n            \n            // Start real-time updates\n            startRealTimeUpdates();\n        }\n        \n        function startRealTimeUpdates() {\n            realTimeInterval = setInterval(() => {\n                if (isRealTimeActive) {\n                    // Generate random CPU value\n                    const newValue = Math.random() * 30 + 20 + Math.sin(Date.now() / 1000) * 20;\n                    \n                    // Update chart data\n                    cpuChart.data.datasets[0].data.shift();\n                    cpuChart.data.datasets[0].data.push(newValue);\n                    \n                    // Update display value\n                    document.getElementById('cpuValue').textContent = newValue.toFixed(1) + '%';\n                    \n                    cpuChart.update('none');\n                }\n            }, 500);\n        }\n        \n        // Smooth Line Chart\n        function initSmoothLineChart() {\n            const ctx = document.getElementById('smoothLineChart').getContext('2d');\n            \n            new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n                    datasets: [{\n                        label: 'Sales',\n                        data: [45, 55, 42, 60, 58, 75, 69, 85, 82, 95, 88, 105],\n                        borderColor: '#20c997',\n                        backgroundColor: 'rgba(32, 201, 151, 0.1)',\n                        tension: 0.4,\n                        borderWidth: 3,\n                        pointBackgroundColor: '#20c997',\n                        pointBorderColor: '#fff',\n                        pointBorderWidth: 2,\n                        pointRadius: 5,\n                        pointHoverRadius: 7\n                    }, {\n                        label: 'Revenue',\n                        data: [28, 35, 32, 45, 42, 55, 52, 68, 65, 78, 72, 88],\n                        borderColor: '#007bff',\n                        backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                        tension: 0.4,\n                        borderWidth: 3,\n                        pointBackgroundColor: '#007bff',\n                        pointBorderColor: '#fff',\n                        pointBorderWidth: 2,\n                        pointRadius: 5,\n                        pointHoverRadius: 7\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        mode: 'index',\n                        intersect: false\n                    },\n                    plugins: {\n                        tooltip: {\n                            backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                            titleColor: '#fff',\n                            bodyColor: '#fff',\n                            borderColor: '#ddd',\n                            borderWidth: 1,\n                            titleFont: {\n                                size: 14\n                            },\n                            bodyFont: {\n                                size: 13\n                            },\n                            padding: 10,\n                            displayColors: true,\n                            callbacks: {\n                                label: function(context) {\n                                    let label = context.dataset.label || '';\n                                    if (label) {\n                                        label += ': $';\n                                    }\n                                    if (context.parsed.y !== null) {\n                                        label += context.parsed.y + 'k';\n                                    }\n                                    return label;\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Interactive Pie Chart\n        function initInteractivePieChart() {\n            const ctx = document.getElementById('interactivePieChart').getContext('2d');\n            \n            const data = {\n                labels: ['Desktop', 'Mobile', 'Tablet', 'Smart TV', 'Others'],\n                datasets: [{\n                    data: [45, 30, 15, 7, 3],\n                    backgroundColor: [\n                        '#007bff',\n                        '#28a745',\n                        '#ffc107',\n                        '#17a2b8',\n                        '#6c757d'\n                    ],\n                    borderWidth: 2,\n                    borderColor: '#fff'\n                }]\n            };\n            \n            const pieChart = new Chart(ctx, {\n                type: 'pie',\n                data: data,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            display: false\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    const label = context.label || '';\n                                    const value = context.parsed;\n                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);\n                                    const percentage = ((value / total) * 100).toFixed(1);\n                                    return label + ': ' + percentage + '%';\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n            \n            // Create custom legend\n            const legendContainer = document.getElementById('pieLegend');\n            data.labels.forEach((label, index) => {\n                const legendItem = document.createElement('div');\n                legendItem.className = 'legend-item';\n                legendItem.innerHTML = `\n                    <div class=\"legend-color\" style=\"background-color: ${data.datasets[0].backgroundColor[index]}\"></div>\n                    <span>${label}: ${data.datasets[0].data[index]}%</span>\n                `;\n                legendItem.style.cursor = 'pointer';\n                legendItem.onclick = () => {\n                    const meta = pieChart.getDatasetMeta(0);\n                    meta.data[index].hidden = !meta.data[index].hidden;\n                    pieChart.update();\n                };\n                legendContainer.appendChild(legendItem);\n            });\n        }\n        \n        // Multi-axis Chart\n        function initMultiAxisChart() {\n            const ctx = document.getElementById('multiAxisChart').getContext('2d');\n            \n            new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: ['Q1', 'Q2', 'Q3', 'Q4'],\n                    datasets: [{\n                        label: 'Revenue ($)',\n                        data: [120000, 150000, 180000, 220000],\n                        borderColor: '#007bff',\n                        backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                        yAxisID: 'y',\n                        tension: 0.3\n                    }, {\n                        label: 'Units Sold',\n                        data: [1200, 1400, 1650, 1900],\n                        borderColor: '#dc3545',\n                        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n                        yAxisID: 'y1',\n                        tension: 0.3\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        mode: 'index',\n                        intersect: false,\n                    },\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'Revenue ($)'\n                            }\n                        },\n                        y1: {\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            title: {\n                                display: true,\n                                text: 'Units Sold'\n                            },\n                            grid: {\n                                drawOnChartArea: false,\n                            },\n                        },\n                    }\n                }\n            });\n        }\n        \n        // Gradient Bar Chart\n        function initGradientBarChart() {\n            const ctx = document.getElementById('gradientBarChart').getContext('2d');\n            \n            // Create gradient\n            const gradient = ctx.createLinearGradient(0, 0, 0, 300);\n            gradient.addColorStop(0, 'rgba(75, 192, 192, 1)');\n            gradient.addColorStop(1, 'rgba(75, 192, 192, 0.2)');\n            \n            new Chart(ctx, {\n                type: 'bar',\n                data: {\n                    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n                    datasets: [{\n                        label: 'Daily Sales',\n                        data: [65, 59, 80, 81, 56, 95, 78],\n                        backgroundColor: gradient,\n                        borderColor: 'rgba(75, 192, 192, 1)',\n                        borderWidth: 1,\n                        borderRadius: 5\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            display: false\n                        }\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Curved Area Chart\n        function initCurvedAreaChart() {\n            const ctx = document.getElementById('curvedAreaChart').getContext('2d');\n            \n            new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: ['00:00', '04:00', '08:00', '12:00', '16:00', '20:00', '24:00'],\n                    datasets: [{\n                        label: 'Network Traffic',\n                        data: [30, 25, 45, 85, 70, 60, 35],\n                        borderColor: '#6f42c1',\n                        backgroundColor: 'rgba(111, 66, 193, 0.2)',\n                        fill: true,\n                        tension: 0.4,\n                        borderWidth: 3,\n                        pointRadius: 0,\n                        pointHoverRadius: 6\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            display: false\n                        }\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            ticks: {\n                                callback: function(value) {\n                                    return value + ' MB/s';\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Time Series Chart\n        function initTimeSeriesChart() {\n            const ctx = document.getElementById('timeSeriesChart').getContext('2d');\n            \n            // Generate time series data\n            const labels = [];\n            const data = [];\n            const now = new Date();\n            \n            for (let i = 30; i >= 0; i--) {\n                const date = new Date(now);\n                date.setDate(date.getDate() - i);\n                labels.push(date.toLocaleDateString());\n                data.push(Math.random() * 50 + 50 + Math.sin(i / 5) * 20);\n            }\n            \n            new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: 'Stock Price',\n                        data: data,\n                        borderColor: '#28a745',\n                        backgroundColor: 'rgba(40, 167, 69, 0.1)',\n                        borderWidth: 2,\n                        pointRadius: 0,\n                        pointHoverRadius: 5,\n                        fill: true\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    plugins: {\n                        zoom: {\n                            zoom: {\n                                wheel: {\n                                    enabled: true,\n                                },\n                                pinch: {\n                                    enabled: true\n                                },\n                                mode: 'x',\n                            },\n                            pan: {\n                                enabled: true,\n                                mode: 'x',\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Combined Chart\n        function initCombinedChart() {\n            const ctx = document.getElementById('combinedChart').getContext('2d');\n            \n            new Chart(ctx, {\n                type: 'bar',\n                data: {\n                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                    datasets: [{\n                        label: 'Sales',\n                        data: [12000, 19000, 15000, 25000, 22000, 30000],\n                        backgroundColor: 'rgba(54, 162, 235, 0.5)',\n                        borderColor: 'rgba(54, 162, 235, 1)',\n                        borderWidth: 1,\n                        order: 2\n                    }, {\n                        label: 'Profit Margin',\n                        data: [15, 18, 12, 22, 20, 25],\n                        type: 'line',\n                        borderColor: '#dc3545',\n                        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n                        borderWidth: 3,\n                        yAxisID: 'y1',\n                        order: 1,\n                        tension: 0.3\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'Sales ($)'\n                            }\n                        },\n                        y1: {\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            title: {\n                                display: true,\n                                text: 'Margin (%)'\n                            },\n                            grid: {\n                                drawOnChartArea: false,\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Stacked Area Chart\n        let stackedChart;\n        function initStackedAreaChart() {\n            const ctx = document.getElementById('stackedAreaChart').getContext('2d');\n            \n            stackedChart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5', 'Week 6', 'Week 7', 'Week 8'],\n                    datasets: [{\n                        label: 'Product A',\n                        data: [20, 30, 25, 35, 30, 40, 35, 45],\n                        backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                        borderColor: 'rgb(255, 99, 132)',\n                        fill: true\n                    }, {\n                        label: 'Product B',\n                        data: [15, 25, 20, 30, 25, 35, 30, 40],\n                        backgroundColor: 'rgba(54, 162, 235, 0.5)',\n                        borderColor: 'rgb(54, 162, 235)',\n                        fill: true\n                    }, {\n                        label: 'Product C',\n                        data: [10, 15, 15, 20, 20, 25, 25, 30],\n                        backgroundColor: 'rgba(255, 206, 86, 0.5)',\n                        borderColor: 'rgb(255, 206, 86)',\n                        fill: true\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        x: {\n                            display: true\n                        },\n                        y: {\n                            stacked: true,\n                            display: true\n                        }\n                    },\n                    plugins: {\n                        annotation: {\n                            annotations: {}\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Control functions\n        window.toggleRealTime = function() {\n            isRealTimeActive = !isRealTimeActive;\n            document.getElementById('toggleText').textContent = isRealTimeActive ? 'Pause' : 'Play';\n        };\n        \n        window.resetChart = function() {\n            cpuChart.data.datasets[0].data = Array(20).fill(0);\n            cpuChart.update();\n        };\n        \n        let annotationCount = 0;\n        window.addAnnotation = function() {\n            const weekIndex = Math.floor(Math.random() * 8);\n            const annotationId = 'event' + annotationCount++;\n            \n            if (!stackedChart.options.plugins.annotation) {\n                stackedChart.options.plugins.annotation = { annotations: {} };\n            }\n            \n            stackedChart.options.plugins.annotation.annotations[annotationId] = {\n                type: 'line',\n                xMin: weekIndex,\n                xMax: weekIndex,\n                borderColor: 'rgb(255, 99, 132)',\n                borderWidth: 2,\n                label: {\n                    content: 'Event',\n                    enabled: true,\n                    position: 'top'\n                }\n            };\n            \n            stackedChart.update();\n        };\n        \n        window.clearAnnotations = function() {\n            if (stackedChart.options.plugins.annotation) {\n                stackedChart.options.plugins.annotation.annotations = {};\n                stackedChart.update();\n            }\n            annotationCount = 0;\n        };\n        \n        // Initialize all charts\n        document.addEventListener('DOMContentLoaded', function() {\n            initCpuLoadChart();\n            initSmoothLineChart();\n            initInteractivePieChart();\n            initMultiAxisChart();\n            initGradientBarChart();\n            initCurvedAreaChart();\n            initTimeSeriesChart();\n            initCombinedChart();\n            initStackedAreaChart();\n        });\n        \n        // Cleanup on page unload\n        window.addEventListener('beforeunload', function() {\n            if (realTimeInterval) {\n                clearInterval(realTimeInterval);\n            }\n        });\n    "],"names":["cpuChart","realTimeInterval","stackedChart","isRealTimeActive","initCpuLoadChart","ctx","document","getElementById","getContext","Chart","type","data","labels","Array","fill","datasets","label","borderColor","backgroundColor","borderWidth","tension","pointRadius","pointHoverRadius","options","responsive","maintainAspectRatio","animation","duration","scales","y","beginAtZero","max","ticks","callback","value","x","display","plugins","legend","tooltip","callbacks","context","parsed","toFixed","setInterval","newValue","Math","random","sin","Date","now","shift","push","textContent","update","window","toggleRealTime","resetChart","annotationCount","addAnnotation","weekIndex","floor","annotationId","annotation","annotations","xMin","xMax","content","enabled","position","clearAnnotations","addEventListener","pointBackgroundColor","pointBorderColor","pointBorderWidth","interaction","mode","intersect","titleColor","bodyColor","titleFont","size","bodyFont","padding","displayColors","dataset","initSmoothLineChart","pieChart","reduce","a","b","legendContainer","forEach","index","legendItem","createElement","className","innerHTML","style","cursor","onclick","meta","getDatasetMeta","hidden","appendChild","initInteractivePieChart","yAxisID","title","text","y1","grid","drawOnChartArea","initMultiAxisChart","gradient","createLinearGradient","addColorStop","borderRadius","initGradientBarChart","initCurvedAreaChart","i","date","setDate","getDate","toLocaleDateString","zoom","wheel","pinch","pan","initTimeSeriesChart","order","initCombinedChart","stacked","initStackedAreaChart","clearInterval"],"mappings":"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"}
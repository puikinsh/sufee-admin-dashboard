{"version":3,"mappings":"uCAEO,MAAMA,CAAc,CACzB,aAAc,CACZ,KAAK,QAAU,IAAI,IACnB,KAAK,OAAS,IAAI,IAClB,KAAK,MAAQ,KACb,KAAK,KAAI,CACX,CAEA,MAAM,MAAO,CACX,QAAQ,IAAI,4BAA4B,EAGxC,MAAM,KAAK,YAAW,EAGtB,KAAK,mBAAkB,EACvB,MAAM,KAAK,uBAAsB,EACjC,MAAM,KAAK,uBAAsB,CACnC,CAEA,MAAM,aAAc,CAClB,GAAI,CAEF,MAAMC,EAAc,YAAM,OAAO,qBAAU,MAC3C,KAAK,MAAQA,EAAY,MAGzB,KAAK,MAAM,SAAS,GAAGA,EAAY,aAAa,EAEhD,QAAQ,IAAI,8BAA8B,CAC5C,OAASC,EAAO,CACd,cAAQ,MAAM,2BAA4BA,CAAK,EACzCA,CACR,CACF,CAEA,oBAAqB,CAEF,SAAS,iBAAiB,qBAAqB,EACvD,QAAQC,GAAW,CACtBA,EAAQ,YAAY,MAAM,KAAK,GACjC,KAAK,eAAeA,CAAO,CAE/B,CAAC,CACH,CAEA,eAAeC,EAAS,CACtB,MAAMC,EAAS,SAASD,EAAQ,YAAY,QAAQ,KAAM,EAAE,CAAC,EAEvDE,EAAOD,GADI,IACiB,IAElC,IAAIE,EAAU,EACd,MAAMC,EAAQ,YAAY,IAAM,CAC9BD,GAAWD,EACPC,GAAWF,IACbE,EAAUF,EACV,cAAcG,CAAK,GAErBJ,EAAQ,YAAc,KAAK,MAAMG,CAAO,EAAE,eAAc,CAC1D,EAAG,EAAE,CACP,CAEA,MAAM,wBAAyB,CAC7B,GAAI,CAAC,KAAK,MAAO,CACf,QAAQ,KAAK,6CAA6C,EAC1D,MACF,CAGA,MAAME,EAAgB,SAAS,iBAAiB,qBAAqB,EAErE,QAAQ,IAAI,SAAS,OAAAA,EAAc,OAAM,yBAAwB,EAEjEA,EAAc,QAAQ,CAACC,EAAQC,IAAU,CACvC,GAAI,CACF,KAAK,kBAAkBD,EAAQC,EAAQ,CAAC,CAC1C,OAAST,EAAO,CACd,QAAQ,MAAM,iCAAiC,OAAAS,EAAQ,EAAC,KAAKT,CAAK,CACpE,CACF,CAAC,CACH,CAEA,kBAAkBQ,EAAQC,EAAO,CAC/B,GAAI,CAACD,EAAQ,CACX,QAAQ,KAAK,uBAAuB,OAAAC,EAAK,aAAY,EACrD,MACF,CAEA,MAAMC,EAAMF,EAAO,WAAW,IAAI,EAClC,GAAI,CAACE,EAAK,CACR,QAAQ,KAAK,0CAA0C,OAAAD,EAAO,EAC9D,MACF,CAGI,KAAK,OAAO,IAAID,EAAO,EAAE,GAC3B,KAAK,OAAO,IAAIA,EAAO,EAAE,EAAE,QAAO,EAIpC,MAAMG,EAAO,KAAK,wBAAwBF,CAAK,EAE/C,QAAQ,IAAI,yBAAyB,OAAAA,EAAK,eAAeE,CAAI,EAE7D,MAAMC,EAAQ,IAAI,KAAK,MAAMF,EAAK,CAChC,KAAM,OACN,KAAMC,EACN,QAAS,CACP,WAAY,GACZ,oBAAqB,GACrB,YAAa,CACX,UAAW,EACrB,EACQ,QAAS,CACP,OAAQ,CACN,QAAS,EACrB,EACU,QAAS,CACP,QAAS,EACrB,CACA,EACQ,OAAQ,CACN,EAAG,CACD,QAAS,GACT,KAAM,CACJ,QAAS,EACvB,CACA,EACU,EAAG,CACD,QAAS,GACT,KAAM,CACJ,QAAS,EACvB,CACA,CACA,EACQ,SAAU,CACR,MAAO,CACL,OAAQ,EACR,YAAa,CACzB,EACU,KAAM,CACJ,YAAa,EACb,QAAS,EACrB,CACA,EACQ,UAAW,CACT,SAAU,GACpB,CACA,CACA,CAAK,EAGD,KAAK,OAAO,IAAIH,EAAO,GAAII,CAAK,EAEhC,QAAQ,IAAI,gBAAgB,OAAAH,EAAK,wBAAuB,CAC1D,CAEA,wBAAwBA,EAAO,CAE7B,MAAMI,EAAW,CACf,CAAE,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAAC,EAChD,CAAE,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAAC,EAChD,CAAE,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAAC,EAChD,CAAE,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAAC,CACtD,EAEUC,EAAeD,EAASJ,EAAQ,CAAC,GAAKI,EAAS,CAAC,EAEtD,MAAO,CACL,OAAQ,MAAMC,EAAa,KAAK,MAAM,EAAE,KAAK,EAAE,EAC/C,SAAU,CAAC,CACT,KAAMA,EAAa,KACnB,YAAa,2BACb,gBAAiB,2BACjB,KAAM,GACN,YAAa,EACb,iBAAkB,CAC1B,CAAO,CACP,CACE,CAEA,MAAM,wBAAyB,CAC7B,MAAMC,EAAgB,SAAS,eAAe,cAAc,EAC5D,GAAI,GAACA,GAAiB,CAAC,KAAK,OAE5B,GAAI,CACF,MAAML,EAAMK,EAAc,WAAW,IAAI,EAGrC,KAAK,OAAO,IAAI,cAAc,GAChC,KAAK,OAAO,IAAI,cAAc,EAAE,QAAO,EAGzC,MAAMH,EAAQ,IAAI,KAAK,MAAMF,EAAK,CAChC,KAAM,OACN,KAAM,CACJ,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAK,EAC7E,SAAU,CAAC,CACT,MAAO,SACP,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAC7C,YAAa,UACb,gBAAiB,yBACjB,KAAM,GACN,QAAS,GACT,YAAa,EACb,iBAAkB,CAC9B,EAAa,CACD,MAAO,gBACP,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAC7C,YAAa,UACb,gBAAiB,yBACjB,KAAM,GACN,QAAS,GACT,YAAa,EACb,iBAAkB,CAC9B,CAAW,CACX,EACQ,QAAS,CACP,WAAY,GACZ,oBAAqB,GACrB,QAAS,CACP,OAAQ,CACN,QAAS,EACvB,EACY,QAAS,CACP,KAAM,QACN,UAAW,EACzB,CACA,EACU,OAAQ,CACN,EAAG,CACD,QAAS,GACT,KAAM,CACJ,QAAS,EACzB,EACc,MAAO,CACL,MAAO,SACvB,CACA,EACY,EAAG,CACD,QAAS,GACT,KAAM,CACJ,MAAO,iBACvB,EACc,MAAO,CACL,MAAO,SACvB,CACA,CACA,EACU,SAAU,CACR,KAAM,CACJ,YAAa,CAC3B,CACA,EACU,YAAa,CACX,KAAM,UACN,KAAM,IACN,UAAW,EACvB,CACA,CACA,CAAO,EAED,KAAK,OAAO,IAAI,eAAgBE,CAAK,EACrC,QAAQ,IAAI,oCAAoC,CAClD,OAASZ,EAAO,CACd,QAAQ,MAAM,sCAAuCA,CAAK,CAC5D,CACF,CAGA,cAAe,CACb,KAAK,OAAO,QAAQY,GAAS,CACvBA,GAAS,OAAOA,EAAM,QAAW,YACnCA,EAAM,OAAM,CAEhB,CAAC,CACH,CAEA,SAAU,CAER,KAAK,OAAO,QAAQA,GAAS,CACvBA,GAAS,OAAOA,EAAM,SAAY,YACpCA,EAAM,QAAO,CAEjB,CAAC,EACD,KAAK,OAAO,MAAK,EACjB,KAAK,QAAQ,MAAK,CACpB,CACF","names":["WidgetManager","chartModule","error","counter","element","target","step","current","timer","chartElements","canvas","index","ctx","data","chart","datasets","selectedData","trafficCanvas"],"ignoreList":[],"sources":["../../src/scripts/components/widgets.js"],"sourcesContent":["// Widget Manager Component - Dashboard widgets functionality\n\nexport class WidgetManager {\n  constructor() {\n    this.widgets = new Map()\n    this.charts = new Map()\n    this.Chart = null\n    this.init()\n  }\n\n  async init() {\n    console.log('Widget Manager initialized')\n    \n    // Load Chart.js first\n    await this.loadChartJS()\n    \n    // Initialize components\n    this.initializeCounters()\n    await this.initializeWidgetCharts()\n    await this.initializeTrafficChart()\n  }\n\n  async loadChartJS() {\n    try {\n      // Dynamically import Chart.js with all components\n      const chartModule = await import('chart.js')\n      this.Chart = chartModule.Chart\n      \n      // Register all Chart.js components\n      this.Chart.register(...chartModule.registerables)\n      \n      console.log('Chart.js loaded successfully')\n    } catch (error) {\n      console.error('Failed to load Chart.js:', error)\n      throw error\n    }\n  }\n\n  initializeCounters() {\n    // Initialize animated counters\n    const counters = document.querySelectorAll('.count, .card-title')\n    counters.forEach(counter => {\n      if (counter.textContent.match(/^\\d/)) {\n        this.animateCounter(counter)\n      }\n    })\n  }\n\n  animateCounter(element) {\n    const target = parseInt(element.textContent.replace(/,/g, ''))\n    const duration = 2000 // 2 seconds\n    const step = target / (duration / 16) // 60fps\n\n    let current = 0\n    const timer = setInterval(() => {\n      current += step\n      if (current >= target) {\n        current = target\n        clearInterval(timer)\n      }\n      element.textContent = Math.floor(current).toLocaleString()\n    }, 16)\n  }\n\n  async initializeWidgetCharts() {\n    if (!this.Chart) {\n      console.warn('Chart.js not loaded, skipping widget charts')\n      return\n    }\n\n    // Find all widget chart canvases\n    const chartElements = document.querySelectorAll('[id^=\"widgetChart\"]')\n    \n    console.log(`Found ${chartElements.length} widget chart canvases`)\n    \n    chartElements.forEach((canvas, index) => {\n      try {\n        this.createWidgetChart(canvas, index + 1)\n      } catch (error) {\n        console.error(`Failed to create widget chart ${index + 1}:`, error)\n      }\n    })\n  }\n\n  createWidgetChart(canvas, index) {\n    if (!canvas) {\n      console.warn(`Widget chart canvas ${index} not found`)\n      return\n    }\n\n    const ctx = canvas.getContext('2d')\n    if (!ctx) {\n      console.warn(`Could not get context for widget chart ${index}`)\n      return\n    }\n\n    // Destroy existing chart if it exists\n    if (this.charts.has(canvas.id)) {\n      this.charts.get(canvas.id).destroy()\n    }\n    \n    // Generate chart data\n    const data = this.generateWidgetChartData(index)\n    \n    console.log(`Creating widget chart ${index} with data:`, data)\n    \n    const chart = new this.Chart(ctx, {\n      type: 'line',\n      data: data,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        interaction: {\n          intersect: false\n        },\n        plugins: {\n          legend: {\n            display: false\n          },\n          tooltip: {\n            enabled: false\n          }\n        },\n        scales: {\n          x: {\n            display: false,\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            display: false,\n            grid: {\n              display: false\n            }\n          }\n        },\n        elements: {\n          point: {\n            radius: 0,\n            hoverRadius: 0\n          },\n          line: {\n            borderWidth: 2,\n            tension: 0.4\n          }\n        },\n        animation: {\n          duration: 1000\n        }\n      }\n    })\n    \n    // Store chart reference\n    this.charts.set(canvas.id, chart)\n    \n    console.log(`Widget chart ${index} created successfully`)\n  }\n\n  generateWidgetChartData(index) {\n    // Different datasets for each widget\n    const datasets = [\n      { data: [65, 59, 84, 84, 51, 55, 40, 65, 59, 84] }, // Primary widget\n      { data: [28, 48, 40, 59, 86, 27, 90, 28, 48, 40] }, // Danger widget\n      { data: [45, 25, 16, 36, 67, 18, 76, 45, 25, 16] }, // Warning widget\n      { data: [12, 19, 27, 43, 52, 31, 48, 12, 19, 27] }  // Success widget\n    ]\n\n    const selectedData = datasets[index - 1] || datasets[0]\n    \n    return {\n      labels: Array(selectedData.data.length).fill(''),\n      datasets: [{\n        data: selectedData.data,\n        borderColor: 'rgba(255, 255, 255, 0.8)',\n        backgroundColor: 'rgba(255, 255, 255, 0.1)',\n        fill: false,\n        pointRadius: 0,\n        pointHoverRadius: 0\n      }]\n    }\n  }\n\n  async initializeTrafficChart() {\n    const trafficCanvas = document.getElementById('trafficChart')\n    if (!trafficCanvas || !this.Chart) return\n\n    try {\n      const ctx = trafficCanvas.getContext('2d')\n      \n      // Destroy existing chart if it exists\n      if (this.charts.has('trafficChart')) {\n        this.charts.get('trafficChart').destroy()\n      }\n      \n      const chart = new this.Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct'],\n          datasets: [{\n            label: 'Visits',\n            data: [65, 59, 84, 84, 51, 55, 40, 58, 72, 69],\n            borderColor: '#007bff',\n            backgroundColor: 'rgba(0, 123, 255, 0.1)',\n            fill: true,\n            tension: 0.4,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }, {\n            label: 'Unique Visits',\n            data: [28, 48, 40, 59, 86, 27, 90, 45, 62, 58],\n            borderColor: '#28a745',\n            backgroundColor: 'rgba(40, 167, 69, 0.1)',\n            fill: true,\n            tension: 0.4,\n            pointRadius: 4,\n            pointHoverRadius: 6\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              mode: 'index',\n              intersect: false\n            }\n          },\n          scales: {\n            x: {\n              display: true,\n              grid: {\n                display: false\n              },\n              ticks: {\n                color: '#6c757d'\n              }\n            },\n            y: {\n              display: true,\n              grid: {\n                color: 'rgba(0,0,0,0.1)'\n              },\n              ticks: {\n                color: '#6c757d'\n              }\n            }\n          },\n          elements: {\n            line: {\n              borderWidth: 2\n            }\n          },\n          interaction: {\n            mode: 'nearest',\n            axis: 'x',\n            intersect: false\n          }\n        }\n      })\n      \n      this.charts.set('trafficChart', chart)\n      console.log('Traffic chart created successfully')\n    } catch (error) {\n      console.error('Failed to initialize traffic chart:', error)\n    }\n  }\n\n  // Handle window resize\n  handleResize() {\n    this.charts.forEach(chart => {\n      if (chart && typeof chart.resize === 'function') {\n        chart.resize()\n      }\n    })\n  }\n\n  destroy() {\n    // Destroy all charts\n    this.charts.forEach(chart => {\n      if (chart && typeof chart.destroy === 'function') {\n        chart.destroy()\n      }\n    })\n    this.charts.clear()\n    this.widgets.clear()\n  }\n}"],"file":"assets/widgets-DwClXpsq.js"}
{"version":3,"file":"pages-forget-legacy-b91x3NYi.js","sources":["../../src/pages-forget.html?html-proxy&index=2.js"],"sourcesContent":["\n        // Forgot password form functionality\n        document.addEventListener('DOMContentLoaded', function() {\n            const forgotForm = document.getElementById('forgotForm');\n            const emailInput = document.getElementById('email');\n            const submitButton = forgotForm.querySelector('button[type=\"submit\"]');\n            const successMessage = document.getElementById('successMessage');\n            const resendInfo = document.getElementById('resendInfo');\n            const resendBtn = document.getElementById('resendBtn');\n            const resendTimer = document.getElementById('resendTimer');\n            \n            let resendCountdown;\n            let resendTime = 60;\n            \n            // Email validation\n            function validateEmail(email) {\n                const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                return re.test(email);\n            }\n            \n            function showError(input, message) {\n                input.classList.add('is-invalid');\n                const feedback = input.nextElementSibling;\n                if (feedback && feedback.classList.contains('invalid-feedback')) {\n                    feedback.textContent = message;\n                }\n            }\n            \n            function clearError(input) {\n                input.classList.remove('is-invalid');\n                input.classList.add('is-valid');\n            }\n            \n            // Real-time email validation\n            emailInput.addEventListener('blur', function() {\n                const email = this.value.trim();\n                if (email === '') {\n                    showError(this, 'Email address is required.');\n                } else if (!validateEmail(email)) {\n                    showError(this, 'Please enter a valid email address.');\n                } else {\n                    clearError(this);\n                }\n            });\n            \n            // Clear validation on input\n            emailInput.addEventListener('input', function() {\n                if (this.classList.contains('is-invalid')) {\n                    this.classList.remove('is-invalid');\n                }\n            });\n            \n            // Start resend countdown\n            function startResendCountdown() {\n                resendTime = 60;\n                resendBtn.disabled = true;\n                \n                resendCountdown = setInterval(() => {\n                    resendTime--;\n                    resendTimer.textContent = resendTime;\n                    \n                    if (resendTime <= 0) {\n                        clearInterval(resendCountdown);\n                        resendBtn.disabled = false;\n                        resendTimer.parentElement.innerHTML = 'You can now request a new reset link.';\n                    }\n                }, 1000);\n            }\n            \n            // Show success state\n            function showSuccessState() {\n                successMessage.style.display = 'block';\n                resendInfo.style.display = 'block';\n                forgotForm.querySelector('.form-floating').style.display = 'none';\n                submitButton.style.display = 'none';\n                startResendCountdown();\n            }\n            \n            // Reset to initial state\n            function resetToInitialState() {\n                successMessage.style.display = 'none';\n                resendInfo.style.display = 'none';\n                forgotForm.querySelector('.form-floating').style.display = 'block';\n                submitButton.style.display = 'block';\n                emailInput.classList.remove('is-valid', 'is-invalid');\n                \n                if (resendCountdown) {\n                    clearInterval(resendCountdown);\n                }\n            }\n            \n            // Form submission\n            forgotForm.addEventListener('submit', function(e) {\n                e.preventDefault();\n                \n                const email = emailInput.value.trim();\n                let isValid = true;\n                \n                // Validate email\n                if (email === '') {\n                    showError(emailInput, 'Email address is required.');\n                    isValid = false;\n                } else if (!validateEmail(email)) {\n                    showError(emailInput, 'Please enter a valid email address.');\n                    isValid = false;\n                } else {\n                    clearError(emailInput);\n                }\n                \n                if (isValid) {\n                    // Show loading state\n                    submitButton.disabled = true;\n                    submitButton.classList.add('loading');\n                    submitButton.textContent = 'Sending...';\n                    \n                    // Simulate sending reset email\n                    setTimeout(() => {\n                        // In a real application, you would send the request to your server\n                        console.log('Password reset request for:', email);\n                        \n                        // Reset button state\n                        submitButton.disabled = false;\n                        submitButton.classList.remove('loading');\n                        submitButton.textContent = 'Send Reset Link';\n                        \n                        // Show success state\n                        showSuccessState();\n                    }, 2000);\n                }\n            });\n            \n            // Resend button functionality\n            resendBtn.addEventListener('click', function() {\n                const email = emailInput.value.trim();\n                \n                if (email && validateEmail(email)) {\n                    // Show loading state for resend button\n                    this.disabled = true;\n                    const originalText = this.textContent;\n                    this.textContent = 'Sending...';\n                    \n                    // Simulate resending email\n                    setTimeout(() => {\n                        // In a real application, you would send the request to your server\n                        console.log('Resending password reset for:', email);\n                        \n                        // Reset button state\n                        this.textContent = originalText;\n                        \n                        // Start countdown again\n                        startResendCountdown();\n                        \n                        // Show brief confirmation\n                        const originalTimerText = resendTimer.parentElement.innerHTML;\n                        resendTimer.parentElement.innerHTML = '<span style=\"color: #28a745;\">Email sent again!</span>';\n                        \n                        setTimeout(() => {\n                            resendTimer.parentElement.innerHTML = `You can request a new reset link in <span class=\"resend-timer\" id=\"resendTimer\">${resendTime}</span> seconds.`;\n                        }, 2000);\n                    }, 1000);\n                }\n            });\n            \n            // Keyboard accessibility\n            document.addEventListener('keydown', function(e) {\n                // Allow form submission with Ctrl+Enter\n                if (e.ctrlKey && e.key === 'Enter') {\n                    if (forgotForm.querySelector('.form-floating').style.display !== 'none') {\n                        forgotForm.dispatchEvent(new Event('submit'));\n                    }\n                }\n                \n                // Reset form with Escape key\n                if (e.key === 'Escape' && successMessage.style.display === 'block') {\n                    resetToInitialState();\n                }\n            });\n            \n            // Auto-focus email input\n            emailInput.focus();\n        });\n    "],"names":["document","addEventListener","forgotForm","getElementById","emailInput","submitButton","querySelector","successMessage","resendInfo","resendBtn","resendTimer","resendCountdown","resendTime","validateEmail","email","test","showError","input","message","classList","add","feedback","nextElementSibling","contains","textContent","clearError","remove","startResendCountdown","disabled","setInterval","clearInterval","parentElement","innerHTML","this","value","trim","e","preventDefault","isValid","setTimeout","console","log","style","display","originalText","ctrlKey","key","dispatchEvent","Event","focus"],"mappings":"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"}
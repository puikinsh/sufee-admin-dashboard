{"version":3,"file":"validation-legacy-DeJ8mMsG.js","sources":["../../src/scripts/components/validation.js"],"sourcesContent":["// Form Validation Component - Vanilla JS replacement for jQuery Validation\n\nexport class FormValidator {\n  constructor(form, rules = {}) {\n    this.form = typeof form === 'string' ? document.querySelector(form) : form;\n    this.rules = rules;\n    this.errors = {};\n\n    if (this.form) {\n      this.init();\n    }\n  }\n\n  init() {\n    this.parseRulesFromAttributes();\n    this.setupEventListeners();\n  }\n\n  parseRulesFromAttributes() {\n    const inputs = this.form.querySelectorAll('[data-validate]');\n    inputs.forEach(input => {\n      const rules = input.dataset.validate.split('|');\n      this.rules[input.name] = rules;\n    });\n  }\n\n  setupEventListeners() {\n    // Form submission\n    this.form.addEventListener('submit', e => {\n      if (!this.validateForm()) {\n        e.preventDefault();\n        this.displayErrors();\n      }\n    });\n\n    // Real-time validation\n    const inputs = this.form.querySelectorAll('input, select, textarea');\n    inputs.forEach(input => {\n      input.addEventListener('blur', () => {\n        this.validateField(input);\n      });\n\n      input.addEventListener('input', () => {\n        this.clearFieldError(input);\n      });\n    });\n  }\n\n  validateForm() {\n    this.errors = {};\n    let isValid = true;\n\n    Object.keys(this.rules).forEach(fieldName => {\n      const field = this.form.querySelector(`[name=\"${fieldName}\"]`);\n      if (field && !this.validateField(field)) {\n        isValid = false;\n      }\n    });\n\n    return isValid;\n  }\n\n  validateField(field) {\n    const fieldName = field.name;\n    const fieldValue = field.value.trim();\n    const rules = this.rules[fieldName] || [];\n\n    delete this.errors[fieldName];\n\n    for (const rule of rules) {\n      const [ruleName, ruleValue] = rule.split(':');\n\n      if (!this.applyRule(fieldValue, ruleName, ruleValue, field)) {\n        this.errors[fieldName] = this.getErrorMessage(fieldName, ruleName, ruleValue);\n        this.showFieldError(field, this.errors[fieldName]);\n        return false;\n      }\n    }\n\n    this.clearFieldError(field);\n    return true;\n  }\n\n  applyRule(value, ruleName, ruleValue, field) {\n    switch (ruleName) {\n      case 'required':\n        return value.length > 0;\n\n      case 'min':\n        return value.length >= parseInt(ruleValue);\n\n      case 'max':\n        return value.length <= parseInt(ruleValue);\n\n      case 'email':\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return !value || emailRegex.test(value);\n\n      case 'numeric':\n        return !value || /^\\d+$/.test(value);\n\n      case 'alpha':\n        return !value || /^[a-zA-Z]+$/.test(value);\n\n      case 'alphanumeric':\n        return !value || /^[a-zA-Z0-9]+$/.test(value);\n\n      case 'url':\n        try {\n          new URL(value);\n          return true;\n        } catch {\n          return !value;\n        }\n\n      case 'confirmed':\n        const confirmField = this.form.querySelector(`[name=\"${ruleValue}\"]`);\n        return confirmField && value === confirmField.value;\n\n      case 'regex':\n        const regex = new RegExp(ruleValue);\n        return !value || regex.test(value);\n\n      default:\n        return true;\n    }\n  }\n\n  getErrorMessage(fieldName, ruleName, ruleValue) {\n    const fieldLabel = this.getFieldLabel(fieldName);\n\n    const messages = {\n      required: `${fieldLabel} is required.`,\n      min: `${fieldLabel} must be at least ${ruleValue} characters.`,\n      max: `${fieldLabel} must not exceed ${ruleValue} characters.`,\n      email: `${fieldLabel} must be a valid email address.`,\n      numeric: `${fieldLabel} must be numeric.`,\n      alpha: `${fieldLabel} must contain only letters.`,\n      alphanumeric: `${fieldLabel} must contain only letters and numbers.`,\n      url: `${fieldLabel} must be a valid URL.`,\n      confirmed: `${fieldLabel} confirmation does not match.`,\n      regex: `${fieldLabel} format is invalid.`\n    };\n\n    return messages[ruleName] || `${fieldLabel} is invalid.`;\n  }\n\n  getFieldLabel(fieldName) {\n    const field = this.form.querySelector(`[name=\"${fieldName}\"]`);\n    const label = this.form.querySelector(`label[for=\"${field?.id}\"]`);\n\n    if (label) {\n      return label.textContent.replace('*', '').trim();\n    }\n\n    return fieldName.charAt(0).toUpperCase() + fieldName.slice(1).replace(/[_-]/g, ' ');\n  }\n\n  showFieldError(field, message) {\n    this.clearFieldError(field);\n\n    field.classList.add('is-invalid');\n\n    const errorElement = document.createElement('div');\n    errorElement.className = 'invalid-feedback';\n    errorElement.textContent = message;\n\n    field.parentNode.appendChild(errorElement);\n  }\n\n  clearFieldError(field) {\n    field.classList.remove('is-invalid');\n\n    const errorElement = field.parentNode.querySelector('.invalid-feedback');\n    if (errorElement) {\n      errorElement.remove();\n    }\n  }\n\n  displayErrors() {\n    // Show a summary of errors if needed\n    if (Object.keys(this.errors).length > 0) {\n      const errorSummary = document.createElement('div');\n      errorSummary.className = 'alert alert-danger';\n      errorSummary.innerHTML = `\n        <strong>Please correct the following errors:</strong>\n        <ul class=\"mb-0 mt-2\">\n          ${Object.values(this.errors)\n            .map(error => `<li>${error}</li>`)\n            .join('')}\n        </ul>\n      `;\n\n      // Remove existing error summary\n      const existingError = this.form.querySelector('.alert-danger');\n      if (existingError) {\n        existingError.remove();\n      }\n\n      this.form.insertBefore(errorSummary, this.form.firstChild);\n\n      // Auto-remove after 5 seconds\n      setTimeout(() => {\n        if (errorSummary.parentNode) {\n          errorSummary.remove();\n        }\n      }, 5000);\n    }\n  }\n\n  // Public API methods\n  addRule(fieldName, rules) {\n    this.rules[fieldName] = Array.isArray(rules) ? rules : [rules];\n  }\n\n  removeRule(fieldName) {\n    delete this.rules[fieldName];\n  }\n\n  resetValidation() {\n    this.errors = {};\n\n    // Clear all field errors\n    const invalidFields = this.form.querySelectorAll('.is-invalid');\n    invalidFields.forEach(field => this.clearFieldError(field));\n\n    // Remove error summary\n    const errorSummary = this.form.querySelector('.alert-danger');\n    if (errorSummary) {\n      errorSummary.remove();\n    }\n  }\n\n  destroy() {\n    this.resetValidation();\n  }\n}\n"],"names":["exports","constructor","form","rules","this","document","querySelector","errors","init","parseRulesFromAttributes","setupEventListeners","querySelectorAll","forEach","input","dataset","validate","split","name","addEventListener","e","validateForm","preventDefault","displayErrors","validateField","clearFieldError","isValid","Object","keys","fieldName","field","fieldValue","value","trim","rule","ruleName","ruleValue","applyRule","getErrorMessage","showFieldError","length","parseInt","test","URL","confirmField","regex","RegExp","fieldLabel","getFieldLabel","required","min","max","email","numeric","alpha","alphanumeric","url","confirmed","label","id","textContent","replace","charAt","toUpperCase","slice","message","classList","add","errorElement","createElement","className","parentNode","appendChild","remove","errorSummary","innerHTML","values","map","error","join","existingError","insertBefore","firstChild","setTimeout","addRule","Array","isArray","removeRule","resetValidation","destroy"],"mappings":"wEA4OAA,EAAA,gBA1OO,MACLC,WAAAA,CAAYC,EAAMC,EAAQ,IACxBC,KAAKF,KAAuB,iBAATA,EAAoBG,SAASC,cAAcJ,GAAQA,EACtEE,KAAKD,MAAQA,EACbC,KAAKG,OAAS,CAAA,EAEVH,KAAKF,MACPE,KAAKI,MAET,CAEAA,IAAAA,GACEJ,KAAKK,2BACLL,KAAKM,qBACP,CAEAD,wBAAAA,GACiBL,KAAKF,KAAKS,iBAAiB,mBACnCC,QAAQC,IACb,MAAMV,EAAQU,EAAMC,QAAQC,SAASC,MAAM,KAC3CZ,KAAKD,MAAMU,EAAMI,MAAQd,GAE7B,CAEAO,mBAAAA,GAEEN,KAAKF,KAAKgB,iBAAiB,SAAUC,IAC9Bf,KAAKgB,iBACRD,EAAEE,iBACFjB,KAAKkB,mBAKMlB,KAAKF,KAAKS,iBAAiB,2BACnCC,QAAQC,IACbA,EAAMK,iBAAiB,OAAQ,KAC7Bd,KAAKmB,cAAcV,KAGrBA,EAAMK,iBAAiB,QAAS,KAC9Bd,KAAKoB,gBAAgBX,MAG3B,CAEAO,YAAAA,GACEhB,KAAKG,OAAS,CAAA,EACd,IAAIkB,GAAU,EASd,OAPAC,OAAOC,KAAKvB,KAAKD,OAAOS,QAAQgB,IAC9B,MAAMC,EAAQzB,KAAKF,KAAKI,cAAc,UAAUsB,OAC5CC,IAAUzB,KAAKmB,cAAcM,KAC/BJ,GAAU,KAIPA,CACT,CAEAF,aAAAA,CAAcM,GACZ,MAAMD,EAAYC,EAAMZ,KAClBa,EAAaD,EAAME,MAAMC,OACzB7B,EAAQC,KAAKD,MAAMyB,IAAc,UAEhCxB,KAAKG,OAAOqB,GAEnB,IAAK,MAAMK,KAAQ9B,EAAO,CACxB,MAAO+B,EAAUC,GAAaF,EAAKjB,MAAM,KAEzC,IAAKZ,KAAKgC,UAAUN,EAAYI,EAAUC,EAAWN,GAGnD,OAFAzB,KAAKG,OAAOqB,GAAaxB,KAAKiC,gBAAgBT,EAAWM,EAAUC,GACnE/B,KAAKkC,eAAeT,EAAOzB,KAAKG,OAAOqB,KAChC,CAEX,CAGA,OADAxB,KAAKoB,gBAAgBK,IACd,CACT,CAEAO,SAAAA,CAAUL,EAAOG,EAAUC,EAAWN,GACpC,OAAQK,GACN,IAAK,WACH,OAAOH,EAAMQ,OAAS,EAExB,IAAK,MACH,OAAOR,EAAMQ,QAAUC,SAASL,GAElC,IAAK,MACH,OAAOJ,EAAMQ,QAAUC,SAASL,GAElC,IAAK,QAEH,OAAQJ,GADW,6BACSU,KAAKV,GAEnC,IAAK,UACH,OAAQA,GAAS,QAAQU,KAAKV,GAEhC,IAAK,QACH,OAAQA,GAAS,cAAcU,KAAKV,GAEtC,IAAK,eACH,OAAQA,GAAS,iBAAiBU,KAAKV,GAEzC,IAAK,MACH,IAEE,OADA,IAAIW,IAAIX,IACD,CACT,CAAE,MACA,OAAQA,CACV,CAEF,IAAK,YACH,MAAMY,EAAevC,KAAKF,KAAKI,cAAc,UAAU6B,OACvD,OAAOQ,GAAgBZ,IAAUY,EAAaZ,MAEhD,IAAK,QACH,MAAMa,EAAQ,IAAIC,OAAOV,GACzB,OAAQJ,GAASa,EAAMH,KAAKV,GAE9B,QACE,OAAO,EAEb,CAEAM,eAAAA,CAAgBT,EAAWM,EAAUC,GACnC,MAAMW,EAAa1C,KAAK2C,cAAcnB,GAetC,MAbiB,CACfoB,SAAU,GAAGF,iBACbG,IAAK,GAAGH,sBAA+BX,gBACvCe,IAAK,GAAGJ,qBAA8BX,gBACtCgB,MAAO,GAAGL,mCACVM,QAAS,GAAGN,qBACZO,MAAO,GAAGP,+BACVQ,aAAc,GAAGR,2CACjBS,IAAK,GAAGT,yBACRU,UAAW,GAAGV,iCACdF,MAAO,GAAGE,wBAGIZ,IAAa,GAAGY,eAClC,CAEAC,aAAAA,CAAcnB,GACZ,MAAMC,EAAQzB,KAAKF,KAAKI,cAAc,UAAUsB,OAC1C6B,EAAQrD,KAAKF,KAAKI,cAAc,cAAcuB,GAAO6B,QAE3D,OAAID,EACKA,EAAME,YAAYC,QAAQ,IAAK,IAAI5B,OAGrCJ,EAAUiC,OAAO,GAAGC,cAAgBlC,EAAUmC,MAAM,GAAGH,QAAQ,QAAS,IACjF,CAEAtB,cAAAA,CAAeT,EAAOmC,GACpB5D,KAAKoB,gBAAgBK,GAErBA,EAAMoC,UAAUC,IAAI,cAEpB,MAAMC,EAAe9D,SAAS+D,cAAc,OAC5CD,EAAaE,UAAY,mBACzBF,EAAaR,YAAcK,EAE3BnC,EAAMyC,WAAWC,YAAYJ,EAC/B,CAEA3C,eAAAA,CAAgBK,GACdA,EAAMoC,UAAUO,OAAO,cAEvB,MAAML,EAAetC,EAAMyC,WAAWhE,cAAc,qBAChD6D,GACFA,EAAaK,QAEjB,CAEAlD,aAAAA,GAEE,GAAII,OAAOC,KAAKvB,KAAKG,QAAQgC,OAAS,EAAG,CACvC,MAAMkC,EAAepE,SAAS+D,cAAc,OAC5CK,EAAaJ,UAAY,qBACzBI,EAAaC,UAAY,8GAGnBhD,OAAOiD,OAAOvE,KAAKG,QAClBqE,IAAIC,GAAS,OAAOA,UACpBC,KAAK,6BAKZ,MAAMC,EAAgB3E,KAAKF,KAAKI,cAAc,iBAC1CyE,GACFA,EAAcP,SAGhBpE,KAAKF,KAAK8E,aAAaP,EAAcrE,KAAKF,KAAK+E,YAG/CC,WAAW,KACLT,EAAaH,YACfG,EAAaD,UAEd,IACL,CACF,CAGAW,OAAAA,CAAQvD,EAAWzB,GACjBC,KAAKD,MAAMyB,GAAawD,MAAMC,QAAQlF,GAASA,EAAQ,CAACA,EAC1D,CAEAmF,UAAAA,CAAW1D,UACFxB,KAAKD,MAAMyB,EACpB,CAEA2D,eAAAA,GACEnF,KAAKG,OAAS,CAAA,EAGQH,KAAKF,KAAKS,iBAAiB,eACnCC,QAAQiB,GAASzB,KAAKoB,gBAAgBK,IAGpD,MAAM4C,EAAerE,KAAKF,KAAKI,cAAc,iBACzCmE,GACFA,EAAaD,QAEjB,CAEAgB,OAAAA,GACEpF,KAAKmF,iBACP"}
{"version":3,"file":"frame-legacy-C-auG6OH.js","sources":["../../src/frame.html?html-proxy&index=2.js"],"sourcesContent":["\n        // Frame functionality\n        document.addEventListener('DOMContentLoaded', function() {\n            const urlInput = document.getElementById('urlInput');\n            const loadBtn = document.getElementById('loadBtn');\n            const refreshBtn = document.getElementById('refreshBtn');\n            const homeBtn = document.getElementById('homeBtn');\n            const contentFrame = document.getElementById('contentFrame');\n            const loadingIndicator = document.getElementById('loadingIndicator');\n            const statusMessage = document.getElementById('statusMessage');\n            const presetBtns = document.querySelectorAll('.preset-btn');\n            \n            let currentUrl = '/';\n            let loadTimeout;\n            \n            // Show status message\n            function showStatus(message, type = 'success') {\n                statusMessage.textContent = message;\n                statusMessage.className = `iframe-status ${type}`;\n                statusMessage.style.display = 'block';\n                \n                // Auto-hide after 3 seconds\n                setTimeout(() => {\n                    statusMessage.style.display = 'none';\n                }, 3000);\n            }\n            \n            // Show loading state\n            function showLoading() {\n                loadingIndicator.style.display = 'flex';\n                loadBtn.disabled = true;\n                loadBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Loading...';\n                \n                // Set timeout for loading\n                loadTimeout = setTimeout(() => {\n                    hideLoading();\n                    showStatus('Loading timed out. The content may not be accessible.', 'error');\n                }, 15000); // 15 second timeout\n            }\n            \n            // Hide loading state\n            function hideLoading() {\n                loadingIndicator.style.display = 'none';\n                loadBtn.disabled = false;\n                loadBtn.innerHTML = '<i class=\"fas fa-play\"></i> Load';\n                \n                if (loadTimeout) {\n                    clearTimeout(loadTimeout);\n                    loadTimeout = null;\n                }\n            }\n            \n            // Validate URL\n            function isValidUrl(string) {\n                try {\n                    new URL(string);\n                    return true;\n                } catch (_) {\n                    // Try with protocol\n                    try {\n                        if (!string.startsWith('http://') && !string.startsWith('https://') && !string.startsWith('/')) {\n                            new URL('https://' + string);\n                            return true;\n                        }\n                    } catch (_) {\n                        return false;\n                    }\n                    return false;\n                }\n            }\n            \n            // Load URL in iframe\n            function loadUrl(url) {\n                if (!url.trim()) {\n                    showStatus('Please enter a valid URL', 'error');\n                    return;\n                }\n                \n                // Normalize URL\n                let normalizedUrl = url.trim();\n                if (!normalizedUrl.startsWith('http://') && \n                    !normalizedUrl.startsWith('https://') && \n                    !normalizedUrl.startsWith('/')) {\n                    normalizedUrl = 'https://' + normalizedUrl;\n                }\n                \n                if (!isValidUrl(normalizedUrl)) {\n                    showStatus('Please enter a valid URL', 'error');\n                    return;\n                }\n                \n                showLoading();\n                currentUrl = normalizedUrl;\n                urlInput.value = normalizedUrl;\n                \n                // Update iframe src\n                contentFrame.src = normalizedUrl;\n                \n                console.log('Loading URL:', normalizedUrl);\n            }\n            \n            // Event listeners\n            loadBtn.addEventListener('click', function() {\n                loadUrl(urlInput.value);\n            });\n            \n            refreshBtn.addEventListener('click', function() {\n                if (currentUrl) {\n                    showLoading();\n                    contentFrame.src = currentUrl + (currentUrl.includes('?') ? '&' : '?') + '_t=' + Date.now();\n                    showStatus('Content refreshed');\n                }\n            });\n            \n            homeBtn.addEventListener('click', function() {\n                loadUrl('/');\n            });\n            \n            // Preset button clicks\n            presetBtns.forEach(btn => {\n                btn.addEventListener('click', function() {\n                    const url = this.getAttribute('data-url');\n                    loadUrl(url);\n                });\n            });\n            \n            // Enter key in URL input\n            urlInput.addEventListener('keydown', function(e) {\n                if (e.key === 'Enter') {\n                    e.preventDefault();\n                    loadUrl(this.value);\n                }\n            });\n            \n            // Iframe load events\n            contentFrame.addEventListener('load', function() {\n                hideLoading();\n                \n                try {\n                    // Try to access iframe content (will fail for cross-origin)\n                    const iframeDoc = this.contentDocument || this.contentWindow.document;\n                    if (iframeDoc) {\n                        const title = iframeDoc.title;\n                        if (title) {\n                            showStatus(`Loaded: ${title}`);\n                        } else {\n                            showStatus('Content loaded successfully');\n                        }\n                    } else {\n                        showStatus('Content loaded successfully');\n                    }\n                } catch (e) {\n                    // Cross-origin restriction - normal behavior\n                    showStatus('Content loaded successfully');\n                }\n            });\n            \n            contentFrame.addEventListener('error', function() {\n                hideLoading();\n                showStatus('Failed to load content. The URL may not be accessible.', 'error');\n            });\n            \n            // Handle iframe navigation attempts\n            window.addEventListener('message', function(event) {\n                // Handle messages from iframe content if needed\n                console.log('Message from iframe:', event.data);\n            });\n            \n            // Initial load indication\n            showLoading();\n            \n            // Auto-hide loading when page is ready\n            if (contentFrame.complete || contentFrame.readyState === 'complete') {\n                hideLoading();\n            }\n            \n            // Back/Forward button handling\n            window.addEventListener('popstate', function(event) {\n                if (event.state && event.state.iframeUrl) {\n                    urlInput.value = event.state.iframeUrl;\n                    loadUrl(event.state.iframeUrl);\n                }\n            });\n            \n            // Update browser history when URL changes\n            function updateHistory(url) {\n                const title = `Frame: ${url}`;\n                history.pushState({iframeUrl: url}, title, window.location.pathname + '?url=' + encodeURIComponent(url));\n            }\n            \n            // Check for URL parameter on load\n            const urlParams = new URLSearchParams(window.location.search);\n            const initialUrl = urlParams.get('url');\n            if (initialUrl) {\n                urlInput.value = initialUrl;\n                loadUrl(initialUrl);\n            }\n            \n            // Update history when loading new URLs\n            const originalLoadUrl = loadUrl;\n            loadUrl = function(url) {\n                originalLoadUrl(url);\n                if (url !== '/') {\n                    updateHistory(url);\n                }\n            };\n        });\n    "],"names":["document","addEventListener","urlInput","getElementById","loadBtn","refreshBtn","homeBtn","contentFrame","loadingIndicator","statusMessage","presetBtns","querySelectorAll","loadTimeout","currentUrl","showStatus","message","type","textContent","className","style","display","setTimeout","showLoading","disabled","innerHTML","hideLoading","clearTimeout","loadUrl","url","trim","normalizedUrl","startsWith","string","URL","_","isValidUrl","value","src","console","log","includes","Date","now","forEach","btn","this","getAttribute","e","key","preventDefault","iframeDoc","contentDocument","contentWindow","title","window","event","data","complete","readyState","state","iframeUrl","initialUrl","URLSearchParams","location","search","get","originalLoadUrl","history","pushState","pathname","encodeURIComponent","updateHistory"],"mappings":"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"}
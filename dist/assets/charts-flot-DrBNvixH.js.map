{"version":3,"file":"charts-flot-DrBNvixH.js","sources":["../../src/charts-flot.html?html-proxy&index=2.js"],"sourcesContent":["\n        import Chart from 'chart.js/auto';\n        \n        // Chart instances\n        let cpuChart, realTimeInterval;\n        let isRealTimeActive = true;\n        \n        // Real-time CPU Load Chart\n        function initCpuLoadChart() {\n            const ctx = document.getElementById('cpuLoadChart').getContext('2d');\n            \n            cpuChart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: Array(20).fill(''),\n                    datasets: [{\n                        label: 'CPU Load',\n                        data: Array(20).fill(0),\n                        borderColor: '#dc3545',\n                        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n                        borderWidth: 2,\n                        tension: 0.4,\n                        fill: true,\n                        pointRadius: 0,\n                        pointHoverRadius: 5\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    animation: {\n                        duration: 150\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            max: 100,\n                            ticks: {\n                                callback: function(value) {\n                                    return value + '%';\n                                }\n                            }\n                        },\n                        x: {\n                            display: false\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            display: false\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    return 'CPU: ' + context.parsed.y.toFixed(1) + '%';\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n            \n            // Start real-time updates\n            startRealTimeUpdates();\n        }\n        \n        function startRealTimeUpdates() {\n            realTimeInterval = setInterval(() => {\n                if (isRealTimeActive) {\n                    // Generate random CPU value\n                    const newValue = Math.random() * 30 + 20 + Math.sin(Date.now() / 1000) * 20;\n                    \n                    // Update chart data\n                    cpuChart.data.datasets[0].data.shift();\n                    cpuChart.data.datasets[0].data.push(newValue);\n                    \n                    // Update display value\n                    document.getElementById('cpuValue').textContent = newValue.toFixed(1) + '%';\n                    \n                    cpuChart.update('none');\n                }\n            }, 500);\n        }\n        \n        // Smooth Line Chart\n        function initSmoothLineChart() {\n            const ctx = document.getElementById('smoothLineChart').getContext('2d');\n            \n            new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n                    datasets: [{\n                        label: 'Sales',\n                        data: [45, 55, 42, 60, 58, 75, 69, 85, 82, 95, 88, 105],\n                        borderColor: '#20c997',\n                        backgroundColor: 'rgba(32, 201, 151, 0.1)',\n                        tension: 0.4,\n                        borderWidth: 3,\n                        pointBackgroundColor: '#20c997',\n                        pointBorderColor: '#fff',\n                        pointBorderWidth: 2,\n                        pointRadius: 5,\n                        pointHoverRadius: 7\n                    }, {\n                        label: 'Revenue',\n                        data: [28, 35, 32, 45, 42, 55, 52, 68, 65, 78, 72, 88],\n                        borderColor: '#007bff',\n                        backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                        tension: 0.4,\n                        borderWidth: 3,\n                        pointBackgroundColor: '#007bff',\n                        pointBorderColor: '#fff',\n                        pointBorderWidth: 2,\n                        pointRadius: 5,\n                        pointHoverRadius: 7\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        mode: 'index',\n                        intersect: false\n                    },\n                    plugins: {\n                        tooltip: {\n                            backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                            titleColor: '#fff',\n                            bodyColor: '#fff',\n                            borderColor: '#ddd',\n                            borderWidth: 1,\n                            titleFont: {\n                                size: 14\n                            },\n                            bodyFont: {\n                                size: 13\n                            },\n                            padding: 10,\n                            displayColors: true,\n                            callbacks: {\n                                label: function(context) {\n                                    let label = context.dataset.label || '';\n                                    if (label) {\n                                        label += ': $';\n                                    }\n                                    if (context.parsed.y !== null) {\n                                        label += context.parsed.y + 'k';\n                                    }\n                                    return label;\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Interactive Pie Chart\n        function initInteractivePieChart() {\n            const ctx = document.getElementById('interactivePieChart').getContext('2d');\n            \n            const data = {\n                labels: ['Desktop', 'Mobile', 'Tablet', 'Smart TV', 'Others'],\n                datasets: [{\n                    data: [45, 30, 15, 7, 3],\n                    backgroundColor: [\n                        '#007bff',\n                        '#28a745',\n                        '#ffc107',\n                        '#17a2b8',\n                        '#6c757d'\n                    ],\n                    borderWidth: 2,\n                    borderColor: '#fff'\n                }]\n            };\n            \n            const pieChart = new Chart(ctx, {\n                type: 'pie',\n                data: data,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            display: false\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    const label = context.label || '';\n                                    const value = context.parsed;\n                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);\n                                    const percentage = ((value / total) * 100).toFixed(1);\n                                    return label + ': ' + percentage + '%';\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n            \n            // Create custom legend\n            const legendContainer = document.getElementById('pieLegend');\n            data.labels.forEach((label, index) => {\n                const legendItem = document.createElement('div');\n                legendItem.className = 'legend-item';\n                legendItem.innerHTML = `\n                    <div class=\"legend-color\" style=\"background-color: ${data.datasets[0].backgroundColor[index]}\"></div>\n                    <span>${label}: ${data.datasets[0].data[index]}%</span>\n                `;\n                legendItem.style.cursor = 'pointer';\n                legendItem.onclick = () => {\n                    const meta = pieChart.getDatasetMeta(0);\n                    meta.data[index].hidden = !meta.data[index].hidden;\n                    pieChart.update();\n                };\n                legendContainer.appendChild(legendItem);\n            });\n        }\n        \n        // Multi-axis Chart\n        function initMultiAxisChart() {\n            const ctx = document.getElementById('multiAxisChart').getContext('2d');\n            \n            new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: ['Q1', 'Q2', 'Q3', 'Q4'],\n                    datasets: [{\n                        label: 'Revenue ($)',\n                        data: [120000, 150000, 180000, 220000],\n                        borderColor: '#007bff',\n                        backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                        yAxisID: 'y',\n                        tension: 0.3\n                    }, {\n                        label: 'Units Sold',\n                        data: [1200, 1400, 1650, 1900],\n                        borderColor: '#dc3545',\n                        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n                        yAxisID: 'y1',\n                        tension: 0.3\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        mode: 'index',\n                        intersect: false,\n                    },\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'Revenue ($)'\n                            }\n                        },\n                        y1: {\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            title: {\n                                display: true,\n                                text: 'Units Sold'\n                            },\n                            grid: {\n                                drawOnChartArea: false,\n                            },\n                        },\n                    }\n                }\n            });\n        }\n        \n        // Gradient Bar Chart\n        function initGradientBarChart() {\n            const ctx = document.getElementById('gradientBarChart').getContext('2d');\n            \n            // Create gradient\n            const gradient = ctx.createLinearGradient(0, 0, 0, 300);\n            gradient.addColorStop(0, 'rgba(75, 192, 192, 1)');\n            gradient.addColorStop(1, 'rgba(75, 192, 192, 0.2)');\n            \n            new Chart(ctx, {\n                type: 'bar',\n                data: {\n                    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n                    datasets: [{\n                        label: 'Daily Sales',\n                        data: [65, 59, 80, 81, 56, 95, 78],\n                        backgroundColor: gradient,\n                        borderColor: 'rgba(75, 192, 192, 1)',\n                        borderWidth: 1,\n                        borderRadius: 5\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            display: false\n                        }\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Curved Area Chart\n        function initCurvedAreaChart() {\n            const ctx = document.getElementById('curvedAreaChart').getContext('2d');\n            \n            new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: ['00:00', '04:00', '08:00', '12:00', '16:00', '20:00', '24:00'],\n                    datasets: [{\n                        label: 'Network Traffic',\n                        data: [30, 25, 45, 85, 70, 60, 35],\n                        borderColor: '#6f42c1',\n                        backgroundColor: 'rgba(111, 66, 193, 0.2)',\n                        fill: true,\n                        tension: 0.4,\n                        borderWidth: 3,\n                        pointRadius: 0,\n                        pointHoverRadius: 6\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            display: false\n                        }\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            ticks: {\n                                callback: function(value) {\n                                    return value + ' MB/s';\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Time Series Chart\n        function initTimeSeriesChart() {\n            const ctx = document.getElementById('timeSeriesChart').getContext('2d');\n            \n            // Generate time series data\n            const labels = [];\n            const data = [];\n            const now = new Date();\n            \n            for (let i = 30; i >= 0; i--) {\n                const date = new Date(now);\n                date.setDate(date.getDate() - i);\n                labels.push(date.toLocaleDateString());\n                data.push(Math.random() * 50 + 50 + Math.sin(i / 5) * 20);\n            }\n            \n            new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: 'Stock Price',\n                        data: data,\n                        borderColor: '#28a745',\n                        backgroundColor: 'rgba(40, 167, 69, 0.1)',\n                        borderWidth: 2,\n                        pointRadius: 0,\n                        pointHoverRadius: 5,\n                        fill: true\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    interaction: {\n                        intersect: false,\n                        mode: 'index'\n                    },\n                    plugins: {\n                        zoom: {\n                            zoom: {\n                                wheel: {\n                                    enabled: true,\n                                },\n                                pinch: {\n                                    enabled: true\n                                },\n                                mode: 'x',\n                            },\n                            pan: {\n                                enabled: true,\n                                mode: 'x',\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Combined Chart\n        function initCombinedChart() {\n            const ctx = document.getElementById('combinedChart').getContext('2d');\n            \n            new Chart(ctx, {\n                type: 'bar',\n                data: {\n                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                    datasets: [{\n                        label: 'Sales',\n                        data: [12000, 19000, 15000, 25000, 22000, 30000],\n                        backgroundColor: 'rgba(54, 162, 235, 0.5)',\n                        borderColor: 'rgba(54, 162, 235, 1)',\n                        borderWidth: 1,\n                        order: 2\n                    }, {\n                        label: 'Profit Margin',\n                        data: [15, 18, 12, 22, 20, 25],\n                        type: 'line',\n                        borderColor: '#dc3545',\n                        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n                        borderWidth: 3,\n                        yAxisID: 'y1',\n                        order: 1,\n                        tension: 0.3\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            display: true,\n                            position: 'left',\n                            title: {\n                                display: true,\n                                text: 'Sales ($)'\n                            }\n                        },\n                        y1: {\n                            type: 'linear',\n                            display: true,\n                            position: 'right',\n                            title: {\n                                display: true,\n                                text: 'Margin (%)'\n                            },\n                            grid: {\n                                drawOnChartArea: false,\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Stacked Area Chart\n        let stackedChart;\n        function initStackedAreaChart() {\n            const ctx = document.getElementById('stackedAreaChart').getContext('2d');\n            \n            stackedChart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5', 'Week 6', 'Week 7', 'Week 8'],\n                    datasets: [{\n                        label: 'Product A',\n                        data: [20, 30, 25, 35, 30, 40, 35, 45],\n                        backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                        borderColor: 'rgb(255, 99, 132)',\n                        fill: true\n                    }, {\n                        label: 'Product B',\n                        data: [15, 25, 20, 30, 25, 35, 30, 40],\n                        backgroundColor: 'rgba(54, 162, 235, 0.5)',\n                        borderColor: 'rgb(54, 162, 235)',\n                        fill: true\n                    }, {\n                        label: 'Product C',\n                        data: [10, 15, 15, 20, 20, 25, 25, 30],\n                        backgroundColor: 'rgba(255, 206, 86, 0.5)',\n                        borderColor: 'rgb(255, 206, 86)',\n                        fill: true\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        x: {\n                            display: true\n                        },\n                        y: {\n                            stacked: true,\n                            display: true\n                        }\n                    },\n                    plugins: {\n                        annotation: {\n                            annotations: {}\n                        }\n                    }\n                }\n            });\n        }\n        \n        // Control functions\n        window.toggleRealTime = function() {\n            isRealTimeActive = !isRealTimeActive;\n            document.getElementById('toggleText').textContent = isRealTimeActive ? 'Pause' : 'Play';\n        };\n        \n        window.resetChart = function() {\n            cpuChart.data.datasets[0].data = Array(20).fill(0);\n            cpuChart.update();\n        };\n        \n        let annotationCount = 0;\n        window.addAnnotation = function() {\n            const weekIndex = Math.floor(Math.random() * 8);\n            const annotationId = 'event' + annotationCount++;\n            \n            if (!stackedChart.options.plugins.annotation) {\n                stackedChart.options.plugins.annotation = { annotations: {} };\n            }\n            \n            stackedChart.options.plugins.annotation.annotations[annotationId] = {\n                type: 'line',\n                xMin: weekIndex,\n                xMax: weekIndex,\n                borderColor: 'rgb(255, 99, 132)',\n                borderWidth: 2,\n                label: {\n                    content: 'Event',\n                    enabled: true,\n                    position: 'top'\n                }\n            };\n            \n            stackedChart.update();\n        };\n        \n        window.clearAnnotations = function() {\n            if (stackedChart.options.plugins.annotation) {\n                stackedChart.options.plugins.annotation.annotations = {};\n                stackedChart.update();\n            }\n            annotationCount = 0;\n        };\n        \n        // Initialize all charts\n        document.addEventListener('DOMContentLoaded', function() {\n            initCpuLoadChart();\n            initSmoothLineChart();\n            initInteractivePieChart();\n            initMultiAxisChart();\n            initGradientBarChart();\n            initCurvedAreaChart();\n            initTimeSeriesChart();\n            initCombinedChart();\n            initStackedAreaChart();\n        });\n        \n        // Cleanup on page unload\n        window.addEventListener('beforeunload', function() {\n            if (realTimeInterval) {\n                clearInterval(realTimeInterval);\n            }\n        });\n    "],"names":["cpuChart","realTimeInterval","isRealTimeActive","initCpuLoadChart","ctx","Chart","value","context","startRealTimeUpdates","newValue","initSmoothLineChart","label","initInteractivePieChart","data","pieChart","total","a","b","percentage","legendContainer","index","legendItem","meta","initMultiAxisChart","initGradientBarChart","gradient","initCurvedAreaChart","initTimeSeriesChart","labels","now","i","date","initCombinedChart","stackedChart","initStackedAreaChart","annotationCount","weekIndex","annotationId"],"mappings":"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"}
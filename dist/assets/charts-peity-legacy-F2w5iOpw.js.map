{"version":3,"file":"charts-peity-legacy-F2w5iOpw.js","sources":["../../src/charts-peity.html?html-proxy&index=2.js"],"sourcesContent":["\n        import Chart from 'chart.js/auto';\n        \n        // Sparkline chart defaults\n        const sparklineDefaults = {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: { display: false },\n                tooltip: { enabled: false }\n            },\n            elements: {\n                point: { radius: 0 },\n                line: { borderWidth: 2 }\n            }\n        };\n        \n        // Create mini pie chart\n        function createMiniPie(elementId, percentage, color) {\n            const ctx = document.getElementById(elementId).getContext('2d');\n            return new Chart(ctx, {\n                type: 'pie',\n                data: {\n                    datasets: [{\n                        data: [percentage, 100 - percentage],\n                        backgroundColor: [color, '#f2f2f2'],\n                        borderWidth: 0\n                    }]\n                },\n                options: {\n                    ...sparklineDefaults,\n                    cutout: 0\n                }\n            });\n        }\n        \n        // Create mini donut chart\n        function createMiniDonut(elementId, percentage, color) {\n            const ctx = document.getElementById(elementId).getContext('2d');\n            return new Chart(ctx, {\n                type: 'doughnut',\n                data: {\n                    datasets: [{\n                        data: [percentage, 100 - percentage],\n                        backgroundColor: [color, '#f2f2f2'],\n                        borderWidth: 0\n                    }]\n                },\n                options: {\n                    ...sparklineDefaults,\n                    cutout: '50%'\n                }\n            });\n        }\n        \n        // Create sparkline\n        function createSparkline(elementId, data, type = 'line', color = '#007bff') {\n            const ctx = document.getElementById(elementId).getContext('2d');\n            const gradient = ctx.createLinearGradient(0, 0, 0, 60);\n            gradient.addColorStop(0, color + '40');\n            gradient.addColorStop(1, color + '00');\n            \n            return new Chart(ctx, {\n                type: type,\n                data: {\n                    labels: Array(data.length).fill(''),\n                    datasets: [{\n                        data: data,\n                        borderColor: color,\n                        backgroundColor: type === 'line' ? gradient : color + '80',\n                        fill: type === 'line',\n                        tension: 0.4,\n                        borderWidth: type === 'line' ? 2 : 0\n                    }]\n                },\n                options: {\n                    ...sparklineDefaults,\n                    scales: {\n                        x: { display: false },\n                        y: { display: false }\n                    }\n                }\n            });\n        }\n        \n        // Initialize dashboard widgets\n        function initDashboardWidgets() {\n            // Revenue sparkline\n            createSparkline('revenueSparkline', [65, 59, 80, 81, 56, 55, 70], 'line', '#007bff');\n            \n            // Users sparkline\n            createSparkline('usersSparkline', [30, 35, 40, 45, 50, 48, 52], 'line', '#28a745');\n            \n            // Conversion sparkline\n            createSparkline('conversionSparkline', [70, 72, 68, 69, 67, 65, 66], 'line', '#ffc107');\n            \n            // Live visitors (will be updated)\n            const liveData = [20, 25, 30, 35, 32, 38, 40];\n            const liveChart = createSparkline('liveSparkline', liveData, 'line', '#17a2b8');\n            \n            // Update live chart\n            setInterval(() => {\n                liveData.shift();\n                liveData.push(Math.floor(Math.random() * 20) + 30);\n                liveChart.data.datasets[0].data = liveData;\n                liveChart.update('none');\n            }, 2000);\n        }\n        \n        // Initialize mini pie charts\n        function initMiniPieCharts() {\n            createMiniPie('pie1', 20, '#13dafe');\n            createMiniPie('pie2', 63, '#6164C1');\n            createMiniPie('pie3', 33, '#F96262');\n            createMiniPie('pie4', 25, '#99D683');\n            createMiniPie('pie5', 75, '#FFCA4A');\n            createMiniPie('pie6', 90, '#4C5667');\n        }\n        \n        // Initialize mini donut charts\n        function initMiniDonutCharts() {\n            createMiniDonut('donut1', 20, '#13DAFE');\n            createMiniDonut('donut2', 63, '#6164C1');\n            createMiniDonut('donut3', 33, '#F96262');\n            createMiniDonut('donut4', 25, '#99D683');\n            createMiniDonut('donut5', 75, '#FFCA4A');\n            createMiniDonut('donut6', 90, '#4C5667');\n        }\n        \n        // Initialize line sparklines\n        function initLineSparklines() {\n            createSparkline('line1', [6, 2, 8, 4, 3, 8, 1, 3, 6, 5, 9, 2, 8, 1, 4, 8, 9, 8, 2, 1], 'line', '#007bff');\n            createSparkline('line2', [6, 2, 8, 4, -3, 8, 1, -3, 6, -5, 9, 2, -8, 1, 4, 8, 9, 8, 2, 1], 'line', '#dc3545');\n            createSparkline('line3', [6, 2, 8, 4, 3, 8, 1, 3, 6, 5, 9, 2, 8, 1, 4, 8, 9, 8, 2, 1], 'line', '#28a745');\n        }\n        \n        // Initialize bar sparklines\n        function initBarSparklines() {\n            createSparkline('bar1', [6, 2, 8, 4, 3, 8, 1, 3, 6, 5, 9, 2, 8, 1, 4, 8, 9, 8, 2, 1], 'bar', '#13DAFE');\n            createSparkline('bar2', [6, 2, 8, 4, -3, 8, 1, -3, 6, -5, 9, 2, -8, 1, 4, 8, 9, 8, 2, 1], 'bar', '#F96262');\n            createSparkline('bar3', [6, 2, 8, 4, 3, 8, 1, 3, 6, 5, 9, 2, 8, 1, 4, 8, 9, 8, 2, 1], 'bar', '#99D683');\n        }\n        \n        // Initialize progress indicators\n        function initProgressIndicators() {\n            const progressValues = [\n                { id: 'progress1', value: 14, color: '#13DAFE' },\n                { id: 'progress2', value: 29, color: '#6164C1' },\n                { id: 'progress3', value: 43, color: '#F96262' },\n                { id: 'progress4', value: 57, color: '#99D683' },\n                { id: 'progress5', value: 71, color: '#FFCA4A' },\n                { id: 'progress6', value: 86, color: '#6f42c1' }\n            ];\n            \n            progressValues.forEach(item => {\n                const ctx = document.getElementById(item.id).getContext('2d');\n                new Chart(ctx, {\n                    type: 'doughnut',\n                    data: {\n                        datasets: [{\n                            data: [item.value, 100 - item.value],\n                            backgroundColor: [item.color, '#eeeeee'],\n                            borderWidth: 0\n                        }]\n                    },\n                    options: {\n                        ...sparklineDefaults,\n                        cutout: '70%',\n                        rotation: -90,\n                        circumference: 180\n                    }\n                });\n            });\n        }\n        \n        // Dynamic charts\n        let dynamicCharts = [];\n        \n        function initDynamicCharts() {\n            // Positive values bar chart\n            const chart1 = createSparkline('dynamic1', [5, 3, 9, 6, 5, 9, 7, 3, 5, 2], 'bar', '#28a745');\n            \n            // Mixed values bar chart with colors\n            const ctx2 = document.getElementById('dynamic2').getContext('2d');\n            const data2 = [5, 3, 2, -1, -3, -2, 2, 3, 5, 2];\n            const colors2 = data2.map(v => v >= 0 ? '#28a745' : '#dc3545');\n            const chart2 = new Chart(ctx2, {\n                type: 'bar',\n                data: {\n                    labels: Array(data2.length).fill(''),\n                    datasets: [{\n                        data: data2,\n                        backgroundColor: colors2,\n                        borderWidth: 0\n                    }]\n                },\n                options: {\n                    ...sparklineDefaults,\n                    scales: {\n                        x: { display: false },\n                        y: { display: false }\n                    }\n                }\n            });\n            \n            // Negative values\n            const chart3 = createSparkline('dynamic3', [0, -3, -6, -4, -5, -4, -7, -3, -5, -2], 'bar', '#dc3545');\n            \n            // Pie chart\n            const ctx4 = document.getElementById('dynamic4').getContext('2d');\n            const chart4 = new Chart(ctx4, {\n                type: 'pie',\n                data: {\n                    datasets: [{\n                        data: [5, 3, 9, 6, 5],\n                        backgroundColor: ['#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8'],\n                        borderWidth: 0\n                    }]\n                },\n                options: sparklineDefaults\n            });\n            \n            dynamicCharts = [chart1, chart2, chart3, chart4];\n        }\n        \n        // Update dynamic charts\n        window.updateDynamicCharts = function() {\n            dynamicCharts.forEach((chart, index) => {\n                if (index < 3) {\n                    // Update bar charts\n                    const newData = Array(10).fill(0).map(() => {\n                        if (index === 0) return Math.random() * 10;\n                        if (index === 1) return Math.random() * 10 - 5;\n                        return -Math.random() * 7;\n                    });\n                    \n                    chart.data.datasets[0].data = newData;\n                    \n                    if (index === 1) {\n                        // Update colors for mixed chart\n                        chart.data.datasets[0].backgroundColor = newData.map(v => v >= 0 ? '#28a745' : '#dc3545');\n                    }\n                } else {\n                    // Update pie chart\n                    chart.data.datasets[0].data = Array(5).fill(0).map(() => Math.random() * 10 + 1);\n                }\n                \n                chart.update();\n            });\n        };\n        \n        // Live updating chart\n        function initLiveUpdateChart() {\n            const ctx = document.getElementById('liveUpdateChart').getContext('2d');\n            const data = Array(50).fill(0).map(() => Math.random() * 100);\n            \n            const chart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: Array(50).fill(''),\n                    datasets: [{\n                        data: data,\n                        borderColor: '#007bff',\n                        backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                        fill: true,\n                        tension: 0.4,\n                        borderWidth: 2\n                    }]\n                },\n                options: {\n                    ...sparklineDefaults,\n                    animation: {\n                        duration: 0\n                    },\n                    scales: {\n                        x: { display: false },\n                        y: { \n                            display: false,\n                            min: 0,\n                            max: 100\n                        }\n                    }\n                }\n            });\n            \n            // Update live chart\n            setInterval(() => {\n                chart.data.datasets[0].data.shift();\n                chart.data.datasets[0].data.push(Math.random() * 100);\n                chart.update('none');\n            }, 500);\n        }\n        \n        // Initialize all charts\n        document.addEventListener('DOMContentLoaded', function() {\n            initDashboardWidgets();\n            initMiniPieCharts();\n            initMiniDonutCharts();\n            initLineSparklines();\n            initBarSparklines();\n            initProgressIndicators();\n            initDynamicCharts();\n            initLiveUpdateChart();\n        });\n    "],"names":["sparklineDefaults","responsive","maintainAspectRatio","plugins","legend","display","tooltip","enabled","elements","point","radius","line","borderWidth","createMiniPie","elementId","percentage","color","ctx","document","getElementById","getContext","Chart","type","data","datasets","backgroundColor","options","cutout","createMiniDonut","createSparkline","gradient","createLinearGradient","addColorStop","labels","Array","length","fill","borderColor","tension","scales","x","y","dynamicCharts","window","updateDynamicCharts","forEach","chart","index","newData","map","Math","random","v","update","addEventListener","liveData","liveChart","setInterval","shift","push","floor","initDashboardWidgets","id","value","item","rotation","circumference","chart1","ctx2","data2","colors2","chart2","chart3","ctx4","chart4","initDynamicCharts","animation","duration","min","max","initLiveUpdateChart"],"mappings":"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"}
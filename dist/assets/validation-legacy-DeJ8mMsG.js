System.register([],function(e,r){"use strict";return{execute:function(){e("FormValidator",class{constructor(e,r={}){this.form="string"==typeof e?document.querySelector(e):e,this.rules=r,this.errors={},this.form&&this.init()}init(){this.parseRulesFromAttributes(),this.setupEventListeners()}parseRulesFromAttributes(){this.form.querySelectorAll("[data-validate]").forEach(e=>{const r=e.dataset.validate.split("|");this.rules[e.name]=r})}setupEventListeners(){this.form.addEventListener("submit",e=>{this.validateForm()||(e.preventDefault(),this.displayErrors())}),this.form.querySelectorAll("input, select, textarea").forEach(e=>{e.addEventListener("blur",()=>{this.validateField(e)}),e.addEventListener("input",()=>{this.clearFieldError(e)})})}validateForm(){this.errors={};let e=!0;return Object.keys(this.rules).forEach(r=>{const t=this.form.querySelector(`[name="${r}"]`);t&&!this.validateField(t)&&(e=!1)}),e}validateField(e){const r=e.name,t=e.value.trim(),s=this.rules[r]||[];delete this.errors[r];for(const i of s){const[s,a]=i.split(":");if(!this.applyRule(t,s,a,e))return this.errors[r]=this.getErrorMessage(r,s,a),this.showFieldError(e,this.errors[r]),!1}return this.clearFieldError(e),!0}applyRule(e,r,t,s){switch(r){case"required":return e.length>0;case"min":return e.length>=parseInt(t);case"max":return e.length<=parseInt(t);case"email":return!e||/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e);case"numeric":return!e||/^\d+$/.test(e);case"alpha":return!e||/^[a-zA-Z]+$/.test(e);case"alphanumeric":return!e||/^[a-zA-Z0-9]+$/.test(e);case"url":try{return new URL(e),!0}catch{return!e}case"confirmed":const r=this.form.querySelector(`[name="${t}"]`);return r&&e===r.value;case"regex":const s=new RegExp(t);return!e||s.test(e);default:return!0}}getErrorMessage(e,r,t){const s=this.getFieldLabel(e);return{required:`${s} is required.`,min:`${s} must be at least ${t} characters.`,max:`${s} must not exceed ${t} characters.`,email:`${s} must be a valid email address.`,numeric:`${s} must be numeric.`,alpha:`${s} must contain only letters.`,alphanumeric:`${s} must contain only letters and numbers.`,url:`${s} must be a valid URL.`,confirmed:`${s} confirmation does not match.`,regex:`${s} format is invalid.`}[r]||`${s} is invalid.`}getFieldLabel(e){const r=this.form.querySelector(`[name="${e}"]`),t=this.form.querySelector(`label[for="${r?.id}"]`);return t?t.textContent.replace("*","").trim():e.charAt(0).toUpperCase()+e.slice(1).replace(/[_-]/g," ")}showFieldError(e,r){this.clearFieldError(e),e.classList.add("is-invalid");const t=document.createElement("div");t.className="invalid-feedback",t.textContent=r,e.parentNode.appendChild(t)}clearFieldError(e){e.classList.remove("is-invalid");const r=e.parentNode.querySelector(".invalid-feedback");r&&r.remove()}displayErrors(){if(Object.keys(this.errors).length>0){const e=document.createElement("div");e.className="alert alert-danger",e.innerHTML=`\n        <strong>Please correct the following errors:</strong>\n        <ul class="mb-0 mt-2">\n          ${Object.values(this.errors).map(e=>`<li>${e}</li>`).join("")}\n        </ul>\n      `;const r=this.form.querySelector(".alert-danger");r&&r.remove(),this.form.insertBefore(e,this.form.firstChild),setTimeout(()=>{e.parentNode&&e.remove()},5e3)}}addRule(e,r){this.rules[e]=Array.isArray(r)?r:[r]}removeRule(e){delete this.rules[e]}resetValidation(){this.errors={},this.form.querySelectorAll(".is-invalid").forEach(e=>this.clearFieldError(e));const e=this.form.querySelector(".alert-danger");e&&e.remove()}destroy(){this.resetValidation()}})}}});
//# sourceMappingURL=validation-legacy-DeJ8mMsG.js.map
